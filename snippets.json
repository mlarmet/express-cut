{
	"typeRouteGet": {
		"key": "type route get",
		"prefix": "rget",
		"body": [
						"",
			"//== START GET ==",
			"//get all test update",
			"router.get('/', async (req, res) => {",
			"    const sql = 'SELECT * FROM ' + tableName;",
			"",
			"    try {",
			"        const [data] = await pool.execute(sql);",
			"        res.status(200).send({ res: true, message: 'success get ' + tableName, data: data });",
			"    } catch (err) {",
			"        res.status(400).send({ res: false, message: 'error get ' + tableName, err: err });",
			"    }",
			"});",
			"//== END GET ==",
			""
		],
		"description": "Creates a type route post for express router",
		"scope": "typescript,javascript"
	},
	"typeRoutePost": {
		"key": "type route post",
		"prefix": "rpost",
		"body": [
						"",
			"//== START POST ==",
			"//create one",
			"router.post('/', async (req, res) => {",
			"    const body = req.body;",
			"",
			"    //TODO : check body fields",
			"    if (!body) {",
			"        res.status(400).send({ res: false, message: 'body not valid' });",
			"        return;",
			"    }",
			"",
			"    //FIXME : set fields",
			"    const sql = 'INSERT INTO ' + tableName + ' (x,x,x) VALUES (?, ?, ?)';",
			"",
			"    //FIXME : set values",
			"    try {",
			"        const [data] = await pool.execute(sql, [body, body, body]);",
			"        res.status(200).send({ res: true, message: 'success post ' + tableName });",
			"    } catch (err) {",
			"        res.status(400).send({ res: false, message: 'error post ' + tableName, err: err });",
			"    }",
			"});",
			"//== END POST ==",
			""
		],
		"description": "Creates a type route post for express router",
		"scope": "typescript,javascript"
	},
	"typeRoutePut": {
		"key": "type route put",
		"prefix": "rput",
		"body": [
						"",
			"//== START PUT ==",
			"//update one with id",
			"router.put('/:id', async (req, res) => {",
			"    const id = req.params.id;",
			"",
			"    if (isNaN(id)) {",
			"        res.status(400).send({ res: false, message: 'id param not valid' });",
			"        return;",
			"    }",
			"",
			"    const body = req.body;",
			"",
			"    //TODO : check body fields",
			"    if (!body) {",
			"        res.status(400).send({ res: false, message: 'body not valid' });",
			"        return;",
			"    }",
			"",
			"    //FIXME : set fields and id",
			"    const sql = 'UPDATE ' + tableName + ' SET field = ? WHERE id = ?';",
			"",
			"    //FIXME : set values",
			"    try {",
			"        const [data] = await pool.execute(sql, [body, id]);",
			"        res.status(200).send({ res: true, message: 'success put ' + tableName });",
			"    } catch (err) {",
			"        res.status(400).send({ res: false, message: 'error put ' + tableName, err: err });",
			"    }",
			"});",
			"//== END PUT ==",
			""
		],
		"description": "Creates a type route put for express router",
		"scope": "typescript,javascript"
	},
	"typeRouteDelete": {
		"key": "type route delete",
		"prefix": "rdel",
		"body": [
						"",
			"//== START DELETE ==",
			"//delete one with id",
			"router.delete('/:id', async (req, res) => {",
			"    const id = req.params.id;",
			"",
			"    if (isNaN(id)) {",
			"        res.status(400).send({ res: false, message: 'id param not valid' });",
			"        return;",
			"    }",
			"",
			"    //FIXME : set id",
			"    const sql = 'DELETE FROM ' + tableName + ' WHERE id = ?';",
			"",
			"    try {",
			"        const [data] = await pool.execute(sql, [id]);",
			"        res.status(200).send({ res: true, message: 'success delete ' + tableName });",
			"    } catch (err) {",
			"        res.status(400).send({ res: false, message: 'error delete ' + tableName, err: err });",
			"    }",
			"});",
			"//== END DELETE ==",
			""	
		],
		"description": "Creates a type route delete for express router",
		"scope": "typescript,javascript"
	}
}